const std = @import("std");

const CEmuCore = @import("../cemucore.zig");

const Uop = enum {
    unimplemented,
    fetch_byte,
    add_r_1,
    dispatch_base,
    add_pc_1,
    halt,
};

const base = [_][]const Uop{
    &[_]Uop{.add_pc_1},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},

    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.halt},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},

    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},

    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
    &[_]Uop{.unimplemented},
};

pub fn decode(impl: anytype) void {
    dispatchAll(impl, &[_]Uop{ .add_r_1, .fetch_byte, .dispatch_base });
}

fn dispatcherFor(comptime table: *const [1 << 8][]const Uop) fn (anytype, comptime u8) void {
    return struct {
        fn dispatcher(impl: anytype, comptime opcode: u8) void {
            dispatchAll(impl, table[opcode]);
        }
    }.dispatcher;
}

fn dispatchAll(impl: anytype, comptime uops: []const Uop) void {
    inline for (uops) |uop| dispatch(impl, uop);
}

fn dispatch(impl: anytype, comptime uop: Uop) void {
    switch (uop) {
        .unimplemented => std.debug.todo(@tagName(uop) ++ " opcode"),
        .fetch_byte => impl.fetchByte(),
        .add_r_1 => impl.addR(1),
        .dispatch_base => impl.dispatch(dispatcherFor(&base)),
        .add_pc_1 => impl.addPC(1),
        .halt => impl.halt(),
    }
}
